// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum OnboardingStatus {
  pending
  in_progress
  completed
  expired
  canceled
}

enum Platform {
  facebook
  googleads
  linkedin
}

// ---------- Models ----------
model Client {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  businessName String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // FK to users.id (1:1); keep it unique
  userId Int?  @unique
  // Name the relation so both sides match
  user   User? @relation("UserClient", fields: [userId], references: [id], onDelete: SetNull)

  onboardingSessions OnboardingSession[]

  @@map("clients")
}

model OnboardingSession {
  // Use the token/uuid as the primary key (easy to embed in URL)
  id              String           @id @default(uuid())
  clientId        String
  createdAt       DateTime         @default(now())
  firstAccessedAt DateTime?
  lastUpdatedAt   DateTime?
  submittedAt     DateTime?
  status          OnboardingStatus @default(pending)
  answers         Json?
  expiresAt       DateTime?
  consumedAt      DateTime?

  tokens OnboardingPlatformToken[]

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId, status])
  @@index([createdAt])
  @@map("onboarding_sessions")
}

model User {
  id           Int     @id @default(autoincrement())
  email        String? @unique
  passwordEnc  String?
  role         String  @default("user")
  tokens       UserToken[]

  // Opposite side of the 1:1 relation; no fields/references here
  client Client? @relation("UserClient")

  @@map("users")
}

model OnboardingPlatformToken {
  id           Int       @id @default(autoincrement())
  sessionId    String
  platform     String
  accessToken  String    @db.Text   
  refreshToken String?   @db.Text
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  session OnboardingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, platform])            // one per platform per session
  @@index([sessionId, platform])
  @@map("onboarding_platform_tokens")
}

model UserToken {
  id           Int      @id @default(autoincrement())
  platform     String
  accessToken  String // use @db.Text if tokens can be long:  @db.Text
  refreshToken String?
  createdAt    DateTime @default(now()) // add @db.Timestamptz(6) if column is timestamptz
  userId       Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform]) // optional but recommended
  @@index([userId, platform])
  @@map("user_tokens") // maps to existing "user_tokens" table
}
