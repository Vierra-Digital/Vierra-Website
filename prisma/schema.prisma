generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id                 String              @id @default(cuid())
  name               String
  email              String              @unique
  businessName       String
  industry           String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  isActive           Boolean             @default(true)
  staffId             Int?                @unique
  staff               Staff?               @relation("StaffClient", fields: [staffId], references: [id])
  onboardingSessions OnboardingSession[]

  @@map("clients")
}

model OnboardingSession {
  id              String                    @id @default(uuid())
  clientId        String
  createdAt       DateTime                  @default(now())
  firstAccessedAt DateTime?
  lastUpdatedAt   DateTime?
  submittedAt     DateTime?
  status          OnboardingStatus          @default(pending)
  answers         Json?
  expiresAt       DateTime?
  consumedAt      DateTime?
  tokens          OnboardingPlatformToken[]
  client          Client                    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId, status])
  @@index([createdAt])
  @@map("onboarding_sessions")
}

model Staff {
  id            Int         @id @default(autoincrement())
  name          String?
  email         String?     @unique
  role          String      @default("staff")
  passwordEnc   String?
  position      String?
  country       String?
  timeZone      String?
  phone         String?
  companyEmail  String?
  client        Client?     @relation("StaffClient")
  tokens        StaffToken[]
  marketingTrackers         MarketingTracker[]
  marketingYearlySummaries  MarketingYearlySummary[]
  signedDocuments           SignedDocuments[]

  @@map("staff")
}

model OnboardingPlatformToken {
  id           Int               @id @default(autoincrement())
  sessionId    String
  platform     Platform
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  session      OnboardingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, platform], name: "sessionId_platform")
  @@index([sessionId, platform])
  @@map("onboarding_platform_tokens")
}

model StaffToken {
  id           Int       @id @default(autoincrement())
  platform     String
  accessToken  String
  createdAt    DateTime  @default(now())
  staffId      Int
  refreshToken String?
  expiresAt    DateTime?
  staff        Staff     @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([staffId, platform], name: "staffId_platform")
  @@index([staffId, platform])
  @@map("staff_tokens")
}

model Author {
  id        Int        @id @default(autoincrement())
  name      String
  email     String?    @unique
  bio       String?
  is_test   Boolean?   @default(false)
  blogPosts BlogPost[]

  @@map("authors")
}

model BlogPost {
  id             Int      @id @default(autoincrement())
  author_id      Int
  title          String
  description    String?
  content        String
  published_date DateTime @default(now()) @db.Timestamp(6)
  slug           String   @unique
  visits         Int?     @default(0)
  tag            String?
  author         Author   @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_author")

  @@map("blog_posts")
}

model MarketingTracker {
  id                    String   @id
  staffId               Int
  year                  Int
  month                 Int
  outreach              Outreach
  attempt               Int      @default(0)
  meetingsSet           Int      @default(0)
  clientsClosed         Int      @default(0)
  revenue               Float    @default(0)
  attemptsToMeetingsPct Float    @default(0)
  meetingsToClientsPct  Float    @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now())
  staff                 Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  @@unique([staffId, year, month, outreach])
  @@index([staffId, year])
  @@map("marketing_tracker")
}

model MarketingYearlySummary {
  id                    String   @id
  staffId               Int
  year                  Int
  totalAttempt          Int      @default(0)
  totalMeetingsSet      Int      @default(0)
  totalClientsLosed     Int      @default(0)
  totalRevenue          Float    @default(0)
  attemptsToMeetingsPct Float    @default(0)
  meetingsToClientsPct  Float    @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now())
  staff                 Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  @@unique([staffId, year])
  @@index([staffId, year])
  @@map("marketing_yearly_summary")
}

model SignedDocuments {
  id               String   @id
  staffId          Int
  originalFilename String
  signedPdfData    Bytes
  fileSize         Int
  signedAt         DateTime @default(now())
  signerEmail      String?
  sessionToken     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  staff            Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  @@index([sessionToken])
  @@index([staffId])
  @@map("signed_documents")
}


enum OnboardingStatus {
  pending
  in_progress
  completed
  expired
  canceled
}

enum Platform {
  facebook
  googleads
  linkedin
}

enum Outreach {
  facebook
  googleads
  linkedin
  instagram
  coldcall
  coldmail
  coldmessage
  walkinnetworking
  autoresponder
  other
}
