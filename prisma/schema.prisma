generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id                 String              @id @default(cuid())
  name               String
  email              String              @unique
  businessName       String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  userId             Int?                @unique
  user               User?               @relation("UserClient", fields: [userId], references: [id])
  onboardingSessions OnboardingSession[]

  @@map("clients")
}

model OnboardingSession {
  id              String                    @id @default(uuid())
  clientId        String
  createdAt       DateTime                  @default(now())
  firstAccessedAt DateTime?
  lastUpdatedAt   DateTime?
  submittedAt     DateTime?
  status          OnboardingStatus          @default(pending)
  answers         Json?
  expiresAt       DateTime?
  consumedAt      DateTime?
  tokens          OnboardingPlatformToken[]
  client          Client                    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId, status])
  @@index([createdAt])
  @@map("onboarding_sessions")
}

model User {
  id          Int         @id @default(autoincrement())
  email       String?     @unique
  role        String      @default("user")
  passwordEnc String?
  client      Client?     @relation("UserClient")
  tokens      UserToken[]

  @@map("users")
}

model OnboardingPlatformToken {
  id           Int               @id @default(autoincrement())
  sessionId    String
  platform     Platform
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  session      OnboardingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, platform], name: "sessionId_platform")
  @@index([sessionId, platform])
  @@map("onboarding_platform_tokens")
}

model UserToken {
  id           Int      @id @default(autoincrement())
  platform     String
  accessToken  String
  createdAt    DateTime @default(now())
  expiresAt    DateTime?
  userId       Int
  refreshToken String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform], name: "userId_platform")
  @@index([userId, platform])
  @@map("user_tokens")
}

enum OnboardingStatus {
  pending
  in_progress
  completed
  expired
  canceled
}

enum Platform {
  facebook
  googleads
  linkedin
}
